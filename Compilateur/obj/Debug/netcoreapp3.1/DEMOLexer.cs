//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Eliott\Ecole\WK_Compiler\Kiwi-Compiler\Compilateur\DEMO.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilateur {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DEMOLexer : Lexer {
	public const int
		PRINT=1, LPAR=2, RPAR=3, COMMA=4, PLUS=5, MINUS=6, BEGIN=7, END=8, TRUE=9, 
		FALSE=10, NOP=11, NOT=12, INC=13, DEC=14, EQUAL=15, BYTE=16, WORD=17, 
		STRING=18, STRING_LITERAL=19, NUMBER=20, ID=21, COMMENT=22, NEWLINE=23, 
		WS=24;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PRINT", "LPAR", "RPAR", "COMMA", "PLUS", "MINUS", "BEGIN", "END", "TRUE", 
		"FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", "BYTE", "WORD", "STRING", 
		"STRING_LITERAL", "NUMBER", "ID", "LETTER", "DIGIT", "BIT", "COMMENT", 
		"NEWLINE", "WS"
	};


	public DEMOLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'('", "')'", "','", "'+'", "'-'", "'Begin'", "'End'", 
		"'TRUE'", "'FALSE'", "'NOP'", "'!'", "'++'", "'--'", "'='", "'byte'", 
		"'word'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "LPAR", "RPAR", "COMMA", "PLUS", "MINUS", "BEGIN", "END", 
		"TRUE", "FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", "BYTE", "WORD", 
		"STRING", "STRING_LITERAL", "NUMBER", "ID", "COMMENT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEMO.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x1A\xB1\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3"+
		"\x13\x3\x14\x3\x14\a\x14\x80\n\x14\f\x14\xE\x14\x83\v\x14\x3\x14\x3\x14"+
		"\x3\x15\x6\x15\x88\n\x15\r\x15\xE\x15\x89\x3\x16\x3\x16\x3\x16\a\x16\x8F"+
		"\n\x16\f\x16\xE\x16\x92\v\x16\x3\x17\x5\x17\x95\n\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\a\x1A\x9D\n\x1A\f\x1A\xE\x1A\xA0\v\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x5\x1B\xA5\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x6"+
		"\x1C\xAC\n\x1C\r\x1C\xE\x1C\xAD\x3\x1C\x3\x1C\x3\x81\x2\x2\x1D\x3\x2\x3"+
		"\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15"+
		"\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x2/\x2\x2\x31\x2\x2\x33\x2\x18\x35"+
		"\x2\x19\x37\x2\x1A\x3\x2\a\x4\x2\x43\\\x63|\x3\x2\x32;\x3\x2\x32\x33\x4"+
		"\x2\f\f\xF\xF\x4\x2\v\v\"\"\xB4\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2"+
		"\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF"+
		"\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2"+
		"\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2"+
		"\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2"+
		"\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2"+
		"\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x3\x39\x3\x2\x2\x2\x5?\x3\x2\x2"+
		"\x2\a\x41\x3\x2\x2\x2\t\x43\x3\x2\x2\x2\v\x45\x3\x2\x2\x2\rG\x3\x2\x2"+
		"\x2\xFI\x3\x2\x2\x2\x11O\x3\x2\x2\x2\x13S\x3\x2\x2\x2\x15X\x3\x2\x2\x2"+
		"\x17^\x3\x2\x2\x2\x19\x62\x3\x2\x2\x2\x1B\x64\x3\x2\x2\x2\x1Dg\x3\x2\x2"+
		"\x2\x1Fj\x3\x2\x2\x2!l\x3\x2\x2\x2#q\x3\x2\x2\x2%v\x3\x2\x2\x2\'}\x3\x2"+
		"\x2\x2)\x87\x3\x2\x2\x2+\x8B\x3\x2\x2\x2-\x94\x3\x2\x2\x2/\x96\x3\x2\x2"+
		"\x2\x31\x98\x3\x2\x2\x2\x33\x9A\x3\x2\x2\x2\x35\xA4\x3\x2\x2\x2\x37\xAB"+
		"\x3\x2\x2\x2\x39:\ar\x2\x2:;\at\x2\x2;<\ak\x2\x2<=\ap\x2\x2=>\av\x2\x2"+
		">\x4\x3\x2\x2\x2?@\a*\x2\x2@\x6\x3\x2\x2\x2\x41\x42\a+\x2\x2\x42\b\x3"+
		"\x2\x2\x2\x43\x44\a.\x2\x2\x44\n\x3\x2\x2\x2\x45\x46\a-\x2\x2\x46\f\x3"+
		"\x2\x2\x2GH\a/\x2\x2H\xE\x3\x2\x2\x2IJ\a\x44\x2\x2JK\ag\x2\x2KL\ai\x2"+
		"\x2LM\ak\x2\x2MN\ap\x2\x2N\x10\x3\x2\x2\x2OP\aG\x2\x2PQ\ap\x2\x2QR\a\x66"+
		"\x2\x2R\x12\x3\x2\x2\x2ST\aV\x2\x2TU\aT\x2\x2UV\aW\x2\x2VW\aG\x2\x2W\x14"+
		"\x3\x2\x2\x2XY\aH\x2\x2YZ\a\x43\x2\x2Z[\aN\x2\x2[\\\aU\x2\x2\\]\aG\x2"+
		"\x2]\x16\x3\x2\x2\x2^_\aP\x2\x2_`\aQ\x2\x2`\x61\aR\x2\x2\x61\x18\x3\x2"+
		"\x2\x2\x62\x63\a#\x2\x2\x63\x1A\x3\x2\x2\x2\x64\x65\a-\x2\x2\x65\x66\a"+
		"-\x2\x2\x66\x1C\x3\x2\x2\x2gh\a/\x2\x2hi\a/\x2\x2i\x1E\x3\x2\x2\x2jk\a"+
		"?\x2\x2k \x3\x2\x2\x2lm\a\x64\x2\x2mn\a{\x2\x2no\av\x2\x2op\ag\x2\x2p"+
		"\"\x3\x2\x2\x2qr\ay\x2\x2rs\aq\x2\x2st\at\x2\x2tu\a\x66\x2\x2u$\x3\x2"+
		"\x2\x2vw\au\x2\x2wx\av\x2\x2xy\at\x2\x2yz\ak\x2\x2z{\ap\x2\x2{|\ai\x2"+
		"\x2|&\x3\x2\x2\x2}\x81\a$\x2\x2~\x80\v\x2\x2\x2\x7F~\x3\x2\x2\x2\x80\x83"+
		"\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x84\x3\x2\x2"+
		"\x2\x83\x81\x3\x2\x2\x2\x84\x85\a$\x2\x2\x85(\x3\x2\x2\x2\x86\x88\x5/"+
		"\x18\x2\x87\x86\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89"+
		"\x8A\x3\x2\x2\x2\x8A*\x3\x2\x2\x2\x8B\x90\x5-\x17\x2\x8C\x8F\x5-\x17\x2"+
		"\x8D\x8F\x5/\x18\x2\x8E\x8C\x3\x2\x2\x2\x8E\x8D\x3\x2\x2\x2\x8F\x92\x3"+
		"\x2\x2\x2\x90\x8E\x3\x2\x2\x2\x90\x91\x3\x2\x2\x2\x91,\x3\x2\x2\x2\x92"+
		"\x90\x3\x2\x2\x2\x93\x95\t\x2\x2\x2\x94\x93\x3\x2\x2\x2\x95.\x3\x2\x2"+
		"\x2\x96\x97\t\x3\x2\x2\x97\x30\x3\x2\x2\x2\x98\x99\t\x4\x2\x2\x99\x32"+
		"\x3\x2\x2\x2\x9A\x9E\a%\x2\x2\x9B\x9D\n\x5\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D"+
		"\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2"+
		"\x2\x2\xA0\x9E\x3\x2\x2\x2\xA1\xA2\b\x1A\x2\x2\xA2\x34\x3\x2\x2\x2\xA3"+
		"\xA5\a\xF\x2\x2\xA4\xA3\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5\xA6\x3\x2"+
		"\x2\x2\xA6\xA7\a\f\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\b\x1B\x2\x2\xA9\x36"+
		"\x3\x2\x2\x2\xAA\xAC\t\x6\x2\x2\xAB\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2"+
		"\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xB0\b"+
		"\x1C\x2\x2\xB0\x38\x3\x2\x2\x2\v\x2\x81\x89\x8E\x90\x94\x9E\xA4\xAD\x3"+
		"\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilateur
