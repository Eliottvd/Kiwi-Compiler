//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Eliott\Ecole\WK_Compiler\Kiwi-Compiler\Compilateur\DEMO.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilateur {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DEMOLexer : Lexer {
	public const int
		PRINT=1, LPAR=2, RPAR=3, COMMA=4, PLUS=5, MINUS=6, BEGIN=7, END=8, TRUE=9, 
		FALSE=10, NOP=11, NOT=12, INC=13, DEC=14, EQUAL=15, BYTE=16, WORD=17, 
		STRING=18, NUMBER=19, ID=20, COMMENT=21, NEWLINE=22, WS=23;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PRINT", "LPAR", "RPAR", "COMMA", "PLUS", "MINUS", "BEGIN", "END", "TRUE", 
		"FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", "BYTE", "WORD", "STRING", 
		"NUMBER", "ID", "LETTER", "DIGIT", "BIT", "COMMENT", "NEWLINE", "WS"
	};


	public DEMOLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'('", "')'", "','", "'+'", "'-'", "'Begin'", "'End'", 
		"'TRUE'", "'FALSE'", "'NOP'", "'!'", "'++'", "'--'", "'='", "'byte'", 
		"'word'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "LPAR", "RPAR", "COMMA", "PLUS", "MINUS", "BEGIN", "END", 
		"TRUE", "FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", "BYTE", "WORD", 
		"STRING", "NUMBER", "ID", "COMMENT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEMO.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x19\xA6\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x6"+
		"\x14}\n\x14\r\x14\xE\x14~\x3\x15\x3\x15\x3\x15\a\x15\x84\n\x15\f\x15\xE"+
		"\x15\x87\v\x15\x3\x16\x5\x16\x8A\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x19\x3\x19\a\x19\x92\n\x19\f\x19\xE\x19\x95\v\x19\x3\x19\x3\x19\x3\x1A"+
		"\x5\x1A\x9A\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x6\x1B\xA1\n\x1B"+
		"\r\x1B\xE\x1B\xA2\x3\x1B\x3\x1B\x2\x2\x2\x1C\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x2-\x2\x2/\x2\x2\x31\x2\x17\x33\x2\x18\x35\x2\x19\x3\x2\a"+
		"\x4\x2\x43\\\x63|\x3\x2\x32;\x3\x2\x32\x33\x4\x2\f\f\xF\xF\x4\x2\v\v\""+
		"\"\xA8\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2"+
		"\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2"+
		"\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19"+
		"\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2"+
		"\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)"+
		"\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2"+
		"\x3\x37\x3\x2\x2\x2\x5=\x3\x2\x2\x2\a?\x3\x2\x2\x2\t\x41\x3\x2\x2\x2\v"+
		"\x43\x3\x2\x2\x2\r\x45\x3\x2\x2\x2\xFG\x3\x2\x2\x2\x11M\x3\x2\x2\x2\x13"+
		"Q\x3\x2\x2\x2\x15V\x3\x2\x2\x2\x17\\\x3\x2\x2\x2\x19`\x3\x2\x2\x2\x1B"+
		"\x62\x3\x2\x2\x2\x1D\x65\x3\x2\x2\x2\x1Fh\x3\x2\x2\x2!j\x3\x2\x2\x2#o"+
		"\x3\x2\x2\x2%t\x3\x2\x2\x2\'|\x3\x2\x2\x2)\x80\x3\x2\x2\x2+\x89\x3\x2"+
		"\x2\x2-\x8B\x3\x2\x2\x2/\x8D\x3\x2\x2\x2\x31\x8F\x3\x2\x2\x2\x33\x99\x3"+
		"\x2\x2\x2\x35\xA0\x3\x2\x2\x2\x37\x38\ar\x2\x2\x38\x39\at\x2\x2\x39:\a"+
		"k\x2\x2:;\ap\x2\x2;<\av\x2\x2<\x4\x3\x2\x2\x2=>\a*\x2\x2>\x6\x3\x2\x2"+
		"\x2?@\a+\x2\x2@\b\x3\x2\x2\x2\x41\x42\a.\x2\x2\x42\n\x3\x2\x2\x2\x43\x44"+
		"\a-\x2\x2\x44\f\x3\x2\x2\x2\x45\x46\a/\x2\x2\x46\xE\x3\x2\x2\x2GH\a\x44"+
		"\x2\x2HI\ag\x2\x2IJ\ai\x2\x2JK\ak\x2\x2KL\ap\x2\x2L\x10\x3\x2\x2\x2MN"+
		"\aG\x2\x2NO\ap\x2\x2OP\a\x66\x2\x2P\x12\x3\x2\x2\x2QR\aV\x2\x2RS\aT\x2"+
		"\x2ST\aW\x2\x2TU\aG\x2\x2U\x14\x3\x2\x2\x2VW\aH\x2\x2WX\a\x43\x2\x2XY"+
		"\aN\x2\x2YZ\aU\x2\x2Z[\aG\x2\x2[\x16\x3\x2\x2\x2\\]\aP\x2\x2]^\aQ\x2\x2"+
		"^_\aR\x2\x2_\x18\x3\x2\x2\x2`\x61\a#\x2\x2\x61\x1A\x3\x2\x2\x2\x62\x63"+
		"\a-\x2\x2\x63\x64\a-\x2\x2\x64\x1C\x3\x2\x2\x2\x65\x66\a/\x2\x2\x66g\a"+
		"/\x2\x2g\x1E\x3\x2\x2\x2hi\a?\x2\x2i \x3\x2\x2\x2jk\a\x64\x2\x2kl\a{\x2"+
		"\x2lm\av\x2\x2mn\ag\x2\x2n\"\x3\x2\x2\x2op\ay\x2\x2pq\aq\x2\x2qr\at\x2"+
		"\x2rs\a\x66\x2\x2s$\x3\x2\x2\x2tu\au\x2\x2uv\av\x2\x2vw\at\x2\x2wx\ak"+
		"\x2\x2xy\ap\x2\x2yz\ai\x2\x2z&\x3\x2\x2\x2{}\x5-\x17\x2|{\x3\x2\x2\x2"+
		"}~\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F(\x3\x2\x2\x2\x80\x85"+
		"\x5+\x16\x2\x81\x84\x5+\x16\x2\x82\x84\x5-\x17\x2\x83\x81\x3\x2\x2\x2"+
		"\x83\x82\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x85\x86\x3"+
		"\x2\x2\x2\x86*\x3\x2\x2\x2\x87\x85\x3\x2\x2\x2\x88\x8A\t\x2\x2\x2\x89"+
		"\x88\x3\x2\x2\x2\x8A,\x3\x2\x2\x2\x8B\x8C\t\x3\x2\x2\x8C.\x3\x2\x2\x2"+
		"\x8D\x8E\t\x4\x2\x2\x8E\x30\x3\x2\x2\x2\x8F\x93\a%\x2\x2\x90\x92\n\x5"+
		"\x2\x2\x91\x90\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x93"+
		"\x94\x3\x2\x2\x2\x94\x96\x3\x2\x2\x2\x95\x93\x3\x2\x2\x2\x96\x97\b\x19"+
		"\x2\x2\x97\x32\x3\x2\x2\x2\x98\x9A\a\xF\x2\x2\x99\x98\x3\x2\x2\x2\x99"+
		"\x9A\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9C\a\f\x2\x2\x9C\x9D\x3\x2\x2"+
		"\x2\x9D\x9E\b\x1A\x2\x2\x9E\x34\x3\x2\x2\x2\x9F\xA1\t\x6\x2\x2\xA0\x9F"+
		"\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2"+
		"\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\b\x1B\x2\x2\xA5\x36\x3\x2\x2\x2\n\x2~"+
		"\x83\x85\x89\x93\x99\xA2\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilateur
