//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Eliott\Ecole\WK_Compiler\Kiwi-Compiler\Compilateur\DEMO.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilateur {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DEMOLexer : Lexer {
	public const int
		PRINT=1, LPAR=2, RPAR=3, LBRACKET=4, RBRACKET=5, COMMA=6, PLUS=7, MINUS=8, 
		BEGIN=9, END=10, TRUE=11, FALSE=12, NOP=13, NOT=14, INC=15, DEC=16, EQUAL=17, 
		BYTE=18, WORD=19, STRING=20, STRING_LITERAL=21, CONST=22, NUMBER=23, ID=24, 
		HEXA8=25, HEXA16=26, BINARY8=27, BINARY16=28, COMMENT=29, NEWLINE=30, 
		WS=31;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PRINT", "LPAR", "RPAR", "LBRACKET", "RBRACKET", "COMMA", "PLUS", "MINUS", 
		"BEGIN", "END", "TRUE", "FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", 
		"BYTE", "WORD", "STRING", "STRING_LITERAL", "CONST", "NUMBER", "ID", "HEXA8", 
		"HEXA16", "BINARY8", "BINARY16", "LETTER", "DIGIT", "BIT", "HEXA", "COMMENT", 
		"NEWLINE", "WS"
	};


	public DEMOLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'('", "')'", "'{'", "'}'", "','", "'+'", "'-'", "'Begin'", 
		"'End'", "'TRUE'", "'FALSE'", "'NOP'", "'!'", "'++'", "'--'", "'='", "'byte'", 
		"'word'", "'string'", null, "'const'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "LPAR", "RPAR", "LBRACKET", "RBRACKET", "COMMA", "PLUS", 
		"MINUS", "BEGIN", "END", "TRUE", "FALSE", "NOP", "NOT", "INC", "DEC", 
		"EQUAL", "BYTE", "WORD", "STRING", "STRING_LITERAL", "CONST", "NUMBER", 
		"ID", "HEXA8", "HEXA16", "BINARY8", "BINARY16", "COMMENT", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEMO.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2!\x100\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\a\x16\x94\n\x16\f\x16"+
		"\xE\x16\x97\v\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3"+
		"\x17\x3\x18\x6\x18\xA2\n\x18\r\x18\xE\x18\xA3\x3\x19\x3\x19\x3\x19\a\x19"+
		"\xA9\n\x19\f\x19\xE\x19\xAC\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x5\x1E\xE1\n\x1E\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x5!\xE8\n!\x3\"\x3\"\a\"\xEC\n\"\f\"\xE\"\xEF\v\"\x3\"\x3"+
		"\"\x3#\x5#\xF4\n#\x3#\x3#\x3#\x3#\x3$\x6$\xFB\n$\r$\xE$\xFC\x3$\x3$\x3"+
		"\x95\x2\x2%\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2"+
		"\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19"+
		"\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x2=\x2\x2"+
		"?\x2\x2\x41\x2\x2\x43\x2\x1F\x45\x2 G\x2!\x3\x2\t\x3\x2\x32\x32\x4\x2"+
		"\x43\\\x63|\x3\x2\x32;\x3\x2\x32\x33\x5\x2\x32;\x43H\x63h\x4\x2\f\f\xF"+
		"\xF\x4\x2\v\v\"\"\x102\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2"+
		"\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2"+
		"\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17"+
		"\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2"+
		"\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2"+
		"\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3"+
		"\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2"+
		"\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2"+
		"\x2\x2G\x3\x2\x2\x2\x3I\x3\x2\x2\x2\x5O\x3\x2\x2\x2\aQ\x3\x2\x2\x2\tS"+
		"\x3\x2\x2\x2\vU\x3\x2\x2\x2\rW\x3\x2\x2\x2\xFY\x3\x2\x2\x2\x11[\x3\x2"+
		"\x2\x2\x13]\x3\x2\x2\x2\x15\x63\x3\x2\x2\x2\x17g\x3\x2\x2\x2\x19l\x3\x2"+
		"\x2\x2\x1Br\x3\x2\x2\x2\x1Dv\x3\x2\x2\x2\x1Fx\x3\x2\x2\x2!{\x3\x2\x2\x2"+
		"#~\x3\x2\x2\x2%\x80\x3\x2\x2\x2\'\x85\x3\x2\x2\x2)\x8A\x3\x2\x2\x2+\x91"+
		"\x3\x2\x2\x2-\x9A\x3\x2\x2\x2/\xA1\x3\x2\x2\x2\x31\xA5\x3\x2\x2\x2\x33"+
		"\xAD\x3\x2\x2\x2\x35\xB2\x3\x2\x2\x2\x37\xB9\x3\x2\x2\x2\x39\xC4\x3\x2"+
		"\x2\x2;\xE0\x3\x2\x2\x2=\xE2\x3\x2\x2\x2?\xE4\x3\x2\x2\x2\x41\xE7\x3\x2"+
		"\x2\x2\x43\xE9\x3\x2\x2\x2\x45\xF3\x3\x2\x2\x2G\xFA\x3\x2\x2\x2IJ\ar\x2"+
		"\x2JK\at\x2\x2KL\ak\x2\x2LM\ap\x2\x2MN\av\x2\x2N\x4\x3\x2\x2\x2OP\a*\x2"+
		"\x2P\x6\x3\x2\x2\x2QR\a+\x2\x2R\b\x3\x2\x2\x2ST\a}\x2\x2T\n\x3\x2\x2\x2"+
		"UV\a\x7F\x2\x2V\f\x3\x2\x2\x2WX\a.\x2\x2X\xE\x3\x2\x2\x2YZ\a-\x2\x2Z\x10"+
		"\x3\x2\x2\x2[\\\a/\x2\x2\\\x12\x3\x2\x2\x2]^\a\x44\x2\x2^_\ag\x2\x2_`"+
		"\ai\x2\x2`\x61\ak\x2\x2\x61\x62\ap\x2\x2\x62\x14\x3\x2\x2\x2\x63\x64\a"+
		"G\x2\x2\x64\x65\ap\x2\x2\x65\x66\a\x66\x2\x2\x66\x16\x3\x2\x2\x2gh\aV"+
		"\x2\x2hi\aT\x2\x2ij\aW\x2\x2jk\aG\x2\x2k\x18\x3\x2\x2\x2lm\aH\x2\x2mn"+
		"\a\x43\x2\x2no\aN\x2\x2op\aU\x2\x2pq\aG\x2\x2q\x1A\x3\x2\x2\x2rs\aP\x2"+
		"\x2st\aQ\x2\x2tu\aR\x2\x2u\x1C\x3\x2\x2\x2vw\a#\x2\x2w\x1E\x3\x2\x2\x2"+
		"xy\a-\x2\x2yz\a-\x2\x2z \x3\x2\x2\x2{|\a/\x2\x2|}\a/\x2\x2}\"\x3\x2\x2"+
		"\x2~\x7F\a?\x2\x2\x7F$\x3\x2\x2\x2\x80\x81\a\x64\x2\x2\x81\x82\a{\x2\x2"+
		"\x82\x83\av\x2\x2\x83\x84\ag\x2\x2\x84&\x3\x2\x2\x2\x85\x86\ay\x2\x2\x86"+
		"\x87\aq\x2\x2\x87\x88\at\x2\x2\x88\x89\a\x66\x2\x2\x89(\x3\x2\x2\x2\x8A"+
		"\x8B\au\x2\x2\x8B\x8C\av\x2\x2\x8C\x8D\at\x2\x2\x8D\x8E\ak\x2\x2\x8E\x8F"+
		"\ap\x2\x2\x8F\x90\ai\x2\x2\x90*\x3\x2\x2\x2\x91\x95\a$\x2\x2\x92\x94\v"+
		"\x2\x2\x2\x93\x92\x3\x2\x2\x2\x94\x97\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2"+
		"\x95\x93\x3\x2\x2\x2\x96\x98\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x98\x99\a"+
		"$\x2\x2\x99,\x3\x2\x2\x2\x9A\x9B\a\x65\x2\x2\x9B\x9C\aq\x2\x2\x9C\x9D"+
		"\ap\x2\x2\x9D\x9E\au\x2\x2\x9E\x9F\av\x2\x2\x9F.\x3\x2\x2\x2\xA0\xA2\x5"+
		"=\x1F\x2\xA1\xA0\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA3\xA1\x3\x2\x2\x2\xA3"+
		"\xA4\x3\x2\x2\x2\xA4\x30\x3\x2\x2\x2\xA5\xAA\x5;\x1E\x2\xA6\xA9\x5;\x1E"+
		"\x2\xA7\xA9\x5=\x1F\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2\x2\x2\xA9\xAC"+
		"\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\x32\x3\x2\x2"+
		"\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAE\t\x2\x2\x2\xAE\xAF\az\x2\x2\xAF\xB0\x5"+
		"\x41!\x2\xB0\xB1\x5\x41!\x2\xB1\x34\x3\x2\x2\x2\xB2\xB3\t\x2\x2\x2\xB3"+
		"\xB4\az\x2\x2\xB4\xB5\x5\x41!\x2\xB5\xB6\x5\x41!\x2\xB6\xB7\x5\x41!\x2"+
		"\xB7\xB8\x5\x41!\x2\xB8\x36\x3\x2\x2\x2\xB9\xBA\t\x2\x2\x2\xBA\xBB\a\x64"+
		"\x2\x2\xBB\xBC\x5? \x2\xBC\xBD\x5? \x2\xBD\xBE\x5? \x2\xBE\xBF\x5? \x2"+
		"\xBF\xC0\x5? \x2\xC0\xC1\x5? \x2\xC1\xC2\x5? \x2\xC2\xC3\x5? \x2\xC3\x38"+
		"\x3\x2\x2\x2\xC4\xC5\t\x2\x2\x2\xC5\xC6\a\x64\x2\x2\xC6\xC7\x5? \x2\xC7"+
		"\xC8\x5? \x2\xC8\xC9\x5? \x2\xC9\xCA\x5? \x2\xCA\xCB\x5? \x2\xCB\xCC\x5"+
		"? \x2\xCC\xCD\x5? \x2\xCD\xCE\x5? \x2\xCE\xCF\x5? \x2\xCF\xD0\x5? \x2"+
		"\xD0\xD1\x5? \x2\xD1\xD2\x5? \x2\xD2\xD3\x5? \x2\xD3\xD4\x5? \x2\xD4\xD5"+
		"\x5? \x2\xD5\xD6\x5? \x2\xD6\xD7\x5? \x2\xD7\xD8\x5? \x2\xD8\xD9\x5? "+
		"\x2\xD9\xDA\x5? \x2\xDA\xDB\x5? \x2\xDB\xDC\x5? \x2\xDC\xDD\x5? \x2\xDD"+
		"\xDE\x5? \x2\xDE:\x3\x2\x2\x2\xDF\xE1\t\x3\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1"+
		"<\x3\x2\x2\x2\xE2\xE3\t\x4\x2\x2\xE3>\x3\x2\x2\x2\xE4\xE5\t\x5\x2\x2\xE5"+
		"@\x3\x2\x2\x2\xE6\xE8\t\x6\x2\x2\xE7\xE6\x3\x2\x2\x2\xE8\x42\x3\x2\x2"+
		"\x2\xE9\xED\a%\x2\x2\xEA\xEC\n\a\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xEF\x3"+
		"\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF0\x3\x2\x2\x2"+
		"\xEF\xED\x3\x2\x2\x2\xF0\xF1\b\"\x2\x2\xF1\x44\x3\x2\x2\x2\xF2\xF4\a\xF"+
		"\x2\x2\xF3\xF2\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5"+
		"\xF6\a\f\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\b#\x2\x2\xF8\x46\x3\x2\x2\x2"+
		"\xF9\xFB\t\b\x2\x2\xFA\xF9\x3\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC\xFA\x3"+
		"\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\b$\x2\x2\xFF"+
		"H\x3\x2\x2\x2\f\x2\x95\xA3\xA8\xAA\xE0\xE7\xED\xF3\xFC\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilateur
