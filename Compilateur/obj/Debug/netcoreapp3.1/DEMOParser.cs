//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Eliott\Ecole\WK_Compiler\Kiwi-Compiler\Compilateur\DEMO.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Compilateur {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class DEMOParser : Parser {
	public const int
		PRINT=1, LPAR=2, RPAR=3, LBRACKET=4, RBRACKET=5, COMMA=6, PLUS=7, MINUS=8, 
		MUL=9, DIV=10, MOD=11, OR=12, AND=13, LSHIFT=14, RSHIFT=15, BEGIN=16, 
		END=17, TRUE=18, FALSE=19, NOP=20, NOT=21, INC=22, DEC=23, EQUAL=24, BYTE=25, 
		WORD=26, STRING=27, STRING_LITERAL=28, CONST=29, NUMBER=30, ID=31, HEXA8=32, 
		HEXA16=33, BINARY8=34, BINARY16=35, COMMENT=36, NEWLINE=37, WS=38;
	public const int
		RULE_demo = 0, RULE_declarationFunction = 1, RULE_parameterDeclaration = 2, 
		RULE_declaration = 3, RULE_instruction = 4, RULE_expr = 5, RULE_exprent = 6;
	public static readonly string[] ruleNames = {
		"demo", "declarationFunction", "parameterDeclaration", "declaration", 
		"instruction", "expr", "exprent"
	};

	private static readonly string[] _LiteralNames = {
		null, "'print'", "'('", "')'", "'{'", "'}'", "','", "'+'", "'-'", "'*'", 
		"'/'", "'%'", "'|'", "'&'", "'<<'", "'>>'", "'Begin'", "'End'", "'TRUE'", 
		"'FALSE'", "'NOP'", "'!'", "'++'", "'--'", "'='", "'byte'", "'word'", 
		"'string'", null, "'const'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PRINT", "LPAR", "RPAR", "LBRACKET", "RBRACKET", "COMMA", "PLUS", 
		"MINUS", "MUL", "DIV", "MOD", "OR", "AND", "LSHIFT", "RSHIFT", "BEGIN", 
		"END", "TRUE", "FALSE", "NOP", "NOT", "INC", "DEC", "EQUAL", "BYTE", "WORD", 
		"STRING", "STRING_LITERAL", "CONST", "NUMBER", "ID", "HEXA8", "HEXA16", 
		"BINARY8", "BINARY16", "COMMENT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DEMO.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public DEMOParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class DemoContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(DEMOParser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(DEMOParser.END, 0); }
		public DeclarationFunctionContext[] declarationFunction() {
			return GetRuleContexts<DeclarationFunctionContext>();
		}
		public DeclarationFunctionContext declarationFunction(int i) {
			return GetRuleContext<DeclarationFunctionContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public DemoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_demo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterDemo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitDemo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDemo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DemoContext demo() {
		DemoContext _localctx = new DemoContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_demo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(BEGIN);
			State = 20;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << LPAR) | (1L << NOP) | (1L << NOT) | (1L << BYTE) | (1L << WORD) | (1L << STRING) | (1L << CONST) | (1L << NUMBER) | (1L << ID) | (1L << HEXA8) | (1L << HEXA16) | (1L << BINARY8) | (1L << BINARY16))) != 0)) {
				{
				State = 18;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 15; declarationFunction();
					}
					break;

				case 2:
					{
					State = 16; declaration();
					}
					break;

				case 3:
					{
					State = 17; instruction();
					}
					break;
				}
				}
				State = 22;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 23; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationFunctionContext : ParserRuleContext {
		public DeclarationFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationFunction; } }
	 
		public DeclarationFunctionContext() { }
		public virtual void CopyFrom(DeclarationFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclFunctionContext : DeclarationFunctionContext {
		public IToken type;
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(DEMOParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(DEMOParser.RPAR, 0); }
		public ITerminalNode LBRACKET() { return GetToken(DEMOParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(DEMOParser.RBRACKET, 0); }
		public ITerminalNode BYTE() { return GetToken(DEMOParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(DEMOParser.WORD, 0); }
		public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		public DeclFunctionContext(DeclarationFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterDeclFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitDeclFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationFunctionContext declarationFunction() {
		DeclarationFunctionContext _localctx = new DeclarationFunctionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_declarationFunction);
		int _la;
		try {
			_localctx = new DeclFunctionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			((DeclFunctionContext)_localctx).type = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BYTE || _la==WORD) ) {
				((DeclFunctionContext)_localctx).type = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 26; Match(ID);
			State = 27; Match(LPAR);
			State = 34;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==BYTE || _la==WORD) {
					{
					{
					State = 28; parameterDeclaration();
					}
					}
					State = 33;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 36; Match(RPAR);
			State = 37; Match(LBRACKET);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRINT) | (1L << LPAR) | (1L << NOP) | (1L << NOT) | (1L << NUMBER) | (1L << ID) | (1L << HEXA8) | (1L << HEXA16) | (1L << BINARY8) | (1L << BINARY16))) != 0)) {
				{
				{
				State = 38; instruction();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public IToken typeVar;
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode COMMA() { return GetToken(DEMOParser.COMMA, 0); }
		public ITerminalNode BYTE() { return GetToken(DEMOParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(DEMOParser.WORD, 0); }
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext parameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_parameterDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_localctx.typeVar = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BYTE || _la==WORD) ) {
				_localctx.typeVar = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 47; Match(ID);
			State = 48; Match(COMMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclVarContext : DeclarationContext {
		public IToken type;
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode BYTE() { return GetToken(DEMOParser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(DEMOParser.WORD, 0); }
		public ITerminalNode STRING() { return GetToken(DEMOParser.STRING, 0); }
		public DeclVarContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterDeclVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitDeclVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclConstContext : DeclarationContext {
		public IToken type;
		public ITerminalNode CONST() { return GetToken(DEMOParser.CONST, 0); }
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(DEMOParser.EQUAL, 0); }
		public ITerminalNode NUMBER() { return GetToken(DEMOParser.NUMBER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(DEMOParser.STRING_LITERAL, 0); }
		public DeclConstContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterDeclConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitDeclConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declaration);
		int _la;
		try {
			State = 56;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case WORD:
			case STRING:
				_localctx = new DeclVarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				((DeclVarContext)_localctx).type = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << WORD) | (1L << STRING))) != 0)) ) {
					((DeclVarContext)_localctx).type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 51; Match(ID);
				}
				break;
			case CONST:
				_localctx = new DeclConstContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 52; Match(CONST);
				State = 53; Match(ID);
				State = 54; Match(EQUAL);
				State = 55;
				((DeclConstContext)_localctx).type = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==STRING_LITERAL || _la==NUMBER) ) {
					((DeclConstContext)_localctx).type = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
	 
		public InstructionContext() { }
		public virtual void CopyFrom(InstructionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InstExprContext : InstructionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InstExprContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterInstExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitInstExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstPrintContext : InstructionContext {
		public ITerminalNode PRINT() { return GetToken(DEMOParser.PRINT, 0); }
		public ITerminalNode LPAR() { return GetToken(DEMOParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(DEMOParser.RPAR, 0); }
		public InstPrintContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterInstPrint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitInstPrint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstAssignationContext : InstructionContext {
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode EQUAL() { return GetToken(DEMOParser.EQUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InstAssignationContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterInstAssignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitInstAssignation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstAssignation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InstNOPContext : InstructionContext {
		public ITerminalNode NOP() { return GetToken(DEMOParser.NOP, 0); }
		public InstNOPContext(InstructionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterInstNOP(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitInstNOP(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstNOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_instruction);
		try {
			State = 68;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new InstExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 58; expr(0);
				}
				break;

			case 2:
				_localctx = new InstPrintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; Match(PRINT);
				State = 60; Match(LPAR);
				State = 61; expr(0);
				State = 62; Match(RPAR);
				}
				break;

			case 3:
				_localctx = new InstAssignationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 64; Match(ID);
				State = 65; Match(EQUAL);
				State = 66; expr(0);
				}
				break;

			case 4:
				_localctx = new InstNOPContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 67; Match(NOP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RightExpParContext : ExprContext {
		public ITerminalNode LPAR() { return GetToken(DEMOParser.LPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RPAR() { return GetToken(DEMOParser.RPAR, 0); }
		public RightExpParContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpPar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpPar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpPar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExpMulDivModContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(DEMOParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(DEMOParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(DEMOParser.MOD, 0); }
		public RightExpMulDivModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprPlusMinusContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(DEMOParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(DEMOParser.MINUS, 0); }
		public RightExprPlusMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprPlusMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprPlusMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprPlusMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExpIncrementContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INC() { return GetToken(DEMOParser.INC, 0); }
		public RightExpIncrementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpIncrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpIncrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExpDecrementContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode DEC() { return GetToken(DEMOParser.DEC, 0); }
		public RightExpDecrementContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpDecrement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpDecrement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprAndOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(DEMOParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(DEMOParser.OR, 0); }
		public RightExprAndOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprAndOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprAndOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprShiftContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprentContext exprent() {
			return GetRuleContext<ExprentContext>(0);
		}
		public ITerminalNode LSHIFT() { return GetToken(DEMOParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(DEMOParser.RSHIFT, 0); }
		public RightExprShiftContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprEntContext : ExprContext {
		public ExprentContext exprent() {
			return GetRuleContext<ExprentContext>(0);
		}
		public RightExprEntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprEnt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprEnt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprEnt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExpIDContext : ExprContext {
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public RightExpIDContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpID(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExpNotContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(DEMOParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public RightExpNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExpNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExpNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExpNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprFctCallContext : ExprContext {
		public ITerminalNode ID() { return GetToken(DEMOParser.ID, 0); }
		public ITerminalNode LPAR() { return GetToken(DEMOParser.LPAR, 0); }
		public ITerminalNode RPAR() { return GetToken(DEMOParser.RPAR, 0); }
		public ParameterDeclarationContext[] parameterDeclaration() {
			return GetRuleContexts<ParameterDeclarationContext>();
		}
		public ParameterDeclarationContext parameterDeclaration(int i) {
			return GetRuleContext<ParameterDeclarationContext>(i);
		}
		public RightExprFctCallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprFctCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprFctCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprFctCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new RightExpParContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 71; Match(LPAR);
				State = 72; expr(0);
				State = 73; Match(RPAR);
				}
				break;

			case 2:
				{
				_localctx = new RightExprEntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 75; exprent();
				}
				break;

			case 3:
				{
				_localctx = new RightExpIDContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 76; Match(ID);
				}
				break;

			case 4:
				{
				_localctx = new RightExpNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 77; Match(NOT);
				State = 78; expr(2);
				}
				break;

			case 5:
				{
				_localctx = new RightExprFctCallContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 79; Match(ID);
				State = 80; Match(LPAR);
				State = 87;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
				case 1:
					{
					State = 84;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==BYTE || _la==WORD) {
						{
						{
						State = 81; parameterDeclaration();
						}
						}
						State = 86;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 89; Match(RPAR);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 110;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 108;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new RightExpMulDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 92;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 93;
						((RightExpMulDivModContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((RightExpMulDivModContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 94; expr(11);
						}
						break;

					case 2:
						{
						_localctx = new RightExprPlusMinusContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 95;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 96;
						((RightExprPlusMinusContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((RightExprPlusMinusContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 97; expr(10);
						}
						break;

					case 3:
						{
						_localctx = new RightExprAndOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 98;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 99;
						((RightExprAndOrContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==OR || _la==AND) ) {
							((RightExprAndOrContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 100; expr(7);
						}
						break;

					case 4:
						{
						_localctx = new RightExpIncrementContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 102; Match(INC);
						}
						break;

					case 5:
						{
						_localctx = new RightExpDecrementContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 104; Match(DEC);
						}
						break;

					case 6:
						{
						_localctx = new RightExprShiftContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 105;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 106;
						((RightExprShiftContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LSHIFT || _la==RSHIFT) ) {
							((RightExprShiftContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 107; exprent();
						}
						break;
					}
					} 
				}
				State = 112;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprentContext : ParserRuleContext {
		public ExprentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprent; } }
	 
		public ExprentContext() { }
		public virtual void CopyFrom(ExprentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RightExprNumberContext : ExprentContext {
		public ITerminalNode NUMBER() { return GetToken(DEMOParser.NUMBER, 0); }
		public RightExprNumberContext(ExprentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprHexa8Context : ExprentContext {
		public ITerminalNode HEXA8() { return GetToken(DEMOParser.HEXA8, 0); }
		public RightExprHexa8Context(ExprentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprHexa8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprHexa8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprHexa8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprHexa16Context : ExprentContext {
		public ITerminalNode HEXA16() { return GetToken(DEMOParser.HEXA16, 0); }
		public RightExprHexa16Context(ExprentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprHexa16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprHexa16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprHexa16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprBinary8Context : ExprentContext {
		public ITerminalNode BINARY8() { return GetToken(DEMOParser.BINARY8, 0); }
		public RightExprBinary8Context(ExprentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprBinary8(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprBinary8(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprBinary8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightExprBinary16Context : ExprentContext {
		public ITerminalNode BINARY16() { return GetToken(DEMOParser.BINARY16, 0); }
		public RightExprBinary16Context(ExprentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.EnterRightExprBinary16(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDEMOListener typedListener = listener as IDEMOListener;
			if (typedListener != null) typedListener.ExitRightExprBinary16(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDEMOVisitor<TResult> typedVisitor = visitor as IDEMOVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightExprBinary16(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprentContext exprent() {
		ExprentContext _localctx = new ExprentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_exprent);
		try {
			State = 118;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new RightExprNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113; Match(NUMBER);
				}
				break;
			case HEXA8:
				_localctx = new RightExprHexa8Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(HEXA8);
				}
				break;
			case HEXA16:
				_localctx = new RightExprHexa16Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 115; Match(HEXA16);
				}
				break;
			case BINARY8:
				_localctx = new RightExprBinary8Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 116; Match(BINARY8);
				}
				break;
			case BINARY16:
				_localctx = new RightExprBinary16Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 117; Match(BINARY16);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 10);

		case 1: return Precpred(_ctx, 9);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 8);

		case 4: return Precpred(_ctx, 7);

		case 5: return Precpred(_ctx, 5);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3({\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\a\x2\x15\n\x2\f\x2\xE\x2\x18\v\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\a\x3 \n\x3\f\x3\xE\x3#\v\x3\x5\x3%\n\x3\x3\x3\x3\x3\x3\x3"+
		"\a\x3*\n\x3\f\x3\xE\x3-\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5;\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6G\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aU\n\a\f\a\xE\aX\v\a\x5\aZ\n\a\x3"+
		"\a\x5\a]\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\a\ao\n\a\f\a\xE\ar\v\a\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x5\by\n\b\x3\b\x2\x2\x3\f\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x2"+
		"\t\x3\x2\x1B\x1C\x3\x2\x1B\x1D\x4\x2\x1E\x1E  \x3\x2\v\r\x3\x2\t\n\x3"+
		"\x2\xE\xF\x3\x2\x10\x11\x8D\x2\x10\x3\x2\x2\x2\x4\x1B\x3\x2\x2\x2\x6\x30"+
		"\x3\x2\x2\x2\b:\x3\x2\x2\x2\n\x46\x3\x2\x2\x2\f\\\x3\x2\x2\x2\xEx\x3\x2"+
		"\x2\x2\x10\x16\a\x12\x2\x2\x11\x15\x5\x4\x3\x2\x12\x15\x5\b\x5\x2\x13"+
		"\x15\x5\n\x6\x2\x14\x11\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x14\x13\x3\x2"+
		"\x2\x2\x15\x18\x3\x2\x2\x2\x16\x14\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17"+
		"\x19\x3\x2\x2\x2\x18\x16\x3\x2\x2\x2\x19\x1A\a\x13\x2\x2\x1A\x3\x3\x2"+
		"\x2\x2\x1B\x1C\t\x2\x2\x2\x1C\x1D\a!\x2\x2\x1D$\a\x4\x2\x2\x1E \x5\x6"+
		"\x4\x2\x1F\x1E\x3\x2\x2\x2 #\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2"+
		"\x2\"%\x3\x2\x2\x2#!\x3\x2\x2\x2$!\x3\x2\x2\x2$%\x3\x2\x2\x2%&\x3\x2\x2"+
		"\x2&\'\a\x5\x2\x2\'+\a\x6\x2\x2(*\x5\n\x6\x2)(\x3\x2\x2\x2*-\x3\x2\x2"+
		"\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\a\x2\x2"+
		"/\x5\x3\x2\x2\x2\x30\x31\t\x2\x2\x2\x31\x32\a!\x2\x2\x32\x33\a\b\x2\x2"+
		"\x33\a\x3\x2\x2\x2\x34\x35\t\x3\x2\x2\x35;\a!\x2\x2\x36\x37\a\x1F\x2\x2"+
		"\x37\x38\a!\x2\x2\x38\x39\a\x1A\x2\x2\x39;\t\x4\x2\x2:\x34\x3\x2\x2\x2"+
		":\x36\x3\x2\x2\x2;\t\x3\x2\x2\x2<G\x5\f\a\x2=>\a\x3\x2\x2>?\a\x4\x2\x2"+
		"?@\x5\f\a\x2@\x41\a\x5\x2\x2\x41G\x3\x2\x2\x2\x42\x43\a!\x2\x2\x43\x44"+
		"\a\x1A\x2\x2\x44G\x5\f\a\x2\x45G\a\x16\x2\x2\x46<\x3\x2\x2\x2\x46=\x3"+
		"\x2\x2\x2\x46\x42\x3\x2\x2\x2\x46\x45\x3\x2\x2\x2G\v\x3\x2\x2\x2HI\b\a"+
		"\x1\x2IJ\a\x4\x2\x2JK\x5\f\a\x2KL\a\x5\x2\x2L]\x3\x2\x2\x2M]\x5\xE\b\x2"+
		"N]\a!\x2\x2OP\a\x17\x2\x2P]\x5\f\a\x4QR\a!\x2\x2RY\a\x4\x2\x2SU\x5\x6"+
		"\x4\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2WZ\x3\x2"+
		"\x2\x2XV\x3\x2\x2\x2YV\x3\x2\x2\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\a\x5"+
		"\x2\x2\\H\x3\x2\x2\x2\\M\x3\x2\x2\x2\\N\x3\x2\x2\x2\\O\x3\x2\x2\x2\\Q"+
		"\x3\x2\x2\x2]p\x3\x2\x2\x2^_\f\f\x2\x2_`\t\x5\x2\x2`o\x5\f\a\r\x61\x62"+
		"\f\v\x2\x2\x62\x63\t\x6\x2\x2\x63o\x5\f\a\f\x64\x65\f\b\x2\x2\x65\x66"+
		"\t\a\x2\x2\x66o\x5\f\a\tgh\f\n\x2\x2ho\a\x18\x2\x2ij\f\t\x2\x2jo\a\x19"+
		"\x2\x2kl\f\a\x2\x2lm\t\b\x2\x2mo\x5\xE\b\x2n^\x3\x2\x2\x2n\x61\x3\x2\x2"+
		"\x2n\x64\x3\x2\x2\x2ng\x3\x2\x2\x2ni\x3\x2\x2\x2nk\x3\x2\x2\x2or\x3\x2"+
		"\x2\x2pn\x3\x2\x2\x2pq\x3\x2\x2\x2q\r\x3\x2\x2\x2rp\x3\x2\x2\x2sy\a \x2"+
		"\x2ty\a\"\x2\x2uy\a#\x2\x2vy\a$\x2\x2wy\a%\x2\x2xs\x3\x2\x2\x2xt\x3\x2"+
		"\x2\x2xu\x3\x2\x2\x2xv\x3\x2\x2\x2xw\x3\x2\x2\x2y\xF\x3\x2\x2\x2\xF\x14"+
		"\x16!$+:\x46VY\\npx";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Compilateur
